using System;
using System.Data.SqlClient;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;

namespace BirthdayBot
{
    class Program
    {
        private static TelegramBotClient botClient;
        private static SqlConnection sqlConnection;

        static void Main()
        {
            string botToken = "  ";
            string connectionString = " ";

            botClient = new TelegramBotClient(botToken);
            sqlConnection = new SqlConnection(connectionString);

            botClient.OnMessage += BotClient_OnMessage;
            botClient.StartReceiving();
            CheckBirthdays();

            Console.WriteLine("Bot started. Press any key to exit.");
            Console.ReadKey();

            botClient.StopReceiving();
            sqlConnection.Close();
        }

        
        private static void BotClient_OnMessage(object sender, MessageEventArgs e)
        {
            if (e.Message.Type == Telegram.Bot.Types.Enums.MessageType.Text)
            {
                if (e.Message.Text.StartsWith("/start"))
                {
                    // –î–æ–¥–∞—Ç–∏ —á–∞—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    AddChatToDatabase(e.Message.Chat.Id);
                    botClient.SendTextMessageAsync(e.Message.Chat.Id, "–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†.");
                }
                else if (DateTime.TryParse(e.Message.Text, out DateTime birthday))
                {
                    // –ó–∞–ø–∏—Å–∞—Ç–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    AddBirthdayToDatabase(e.Message.Chat.Id, e.Message.From.Id, birthday);
                    botClient.SendTextMessageAsync(e.Message.Chat.Id, "–î—è–∫—É—é! –¢–≤–æ—è –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞.");
                }
                else
                {
                    botClient.SendTextMessageAsync(e.Message.Chat.Id, "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–†–†–†–†.");
                }
            }
        }

        private static void AddChatToDatabase(long chatId)
        {
            try
            {
                sqlConnection.Open();

                using (SqlCommand command = new SqlCommand("INSERT INTO Chats (ChatId) VALUES (@ChatId)", sqlConnection))
                {
                    command.Parameters.AddWithValue("@ChatId", chatId);
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error adding chat to database: " + ex.Message);
            }
            finally
            {
                sqlConnection.Close();
            }
        }

        private static void AddBirthdayToDatabase(long chatId, long userId, DateTime birthday)
        {
            try
            {
                sqlConnection.Open();

                using (SqlCommand command = new SqlCommand("INSERT INTO Birthdays (ChatId, UserId, Birthday) VALUES (@ChatId, @UserId, @Birthday)", sqlConnection))
                {
                    command.Parameters.AddWithValue("@ChatId", chatId);
                    command.Parameters.AddWithValue("@UserId", userId);
                    command.Parameters.AddWithValue("@Birthday", birthday);
                    command.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error adding birthday to database: " + ex.Message);
            }
            finally
            {
                sqlConnection.Close();
            }
        }

        private static void CheckBirthdays()
        {
            try
            {
                sqlConnection.Open();

                // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                DateTime currentDate = DateTime.Now.Date;

                // –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω—å, —â–æ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
                string query = "SELECT ChatId, UserId FROM Birthdays WHERE Birthday = @CurrentDate";

                using (SqlCommand command = new SqlCommand(query, sqlConnection))
                {
                    command.Parameters.AddWithValue("@CurrentDate", currentDate);

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            long chatId = (long)reader["ChatId"];
                            long userId = (long)reader["UserId"];

                            // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                            string message = GetGreetingMessage(userId);

                            // –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —É —á–∞—Ç
                            botClient.SendTextMessageAsync(chatId,  message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error checking birthdays: " + ex.Message);
            }
            finally
            {
                sqlConnection.Close();
            }
        }

        private static string GetGreetingMessage(long Id)
        {
            // –í–∞—à –∫–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
            // –ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å–∏—Ç—É–∞—Ü—ñ—ó –∞–±–æ –æ–±—Ä–∞–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É
            // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∞—Ç–∏ —Ç–∞ —ñ–º–µ–Ω—ñ

            return $"–ó {Id} –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéâ";
        }
    }
}
